@isTest
public with sharing class HttpRequestWrappersUtilTest {
    @isTest static void testMethod1(){
        HttpRequestWrappersUtil.Dataparams Dataparamswrapper= new HttpRequestWrappersUtil.Dataparams();
        Dataparamswrapper.message = 'Test Message';
        Dataparamswrapper.terms ='Test Message';
        Dataparamswrapper.title ='Test Message';
        Dataparamswrapper.typeid ='Test Message';
        Dataparamswrapper.id ='Test Message';
        Dataparamswrapper.action ='Test Message';
        Dataparamswrapper.postScript ='Test Message';
        Dataparamswrapper.expiryTime ='Test Message';
        Dataparamswrapper.actionTitle ='Test Message';
        Dataparamswrapper.sid ='Test Message';
        Dataparamswrapper.time_to_live ='Test Message';
        Dataparamswrapper.timestamp ='Test Message';
        HttpRequestWrappersUtil.Pushdata Pushdatawrapper= new HttpRequestWrappersUtil.Pushdata();
        Pushdatawrapper.EmailId = new List<String>();
        Pushdatawrapper.Dataparams = Dataparamswrapper;
        HttpRequestWrappersUtil.CustomMessageDetails wrapper= new HttpRequestWrappersUtil.CustomMessageDetails();
        wrapper.TemplateName='Test Template';
        wrapper.DataJsonStr='Test';
        wrapper.DataComplexity='Test';
        HttpRequestWrappersUtil.SMSMessage SMSMessagewrapper= new HttpRequestWrappersUtil.SMSMessage();
        SMSMessagewrapper.senderId='Test';
        SMSMessagewrapper.mobileNo='Test';
        SMSMessagewrapper.message='Test';
        SMSMessagewrapper.isUnicodeSms=true;
        SMSMessagewrapper.CustomMessageDetails=wrapper;
        HttpRequestWrappersUtil.SMSRequest SMSRequestwrapper= new HttpRequestWrappersUtil.SMSRequest();
        SMSRequestwrapper.SMSMessage=SMSMessagewrapper;
        HttpRequestWrappersUtil.Smsdata Smsdatawrapper= new HttpRequestWrappersUtil.Smsdata();
        Smsdatawrapper.NotificationType='Test';
        Smsdatawrapper.Language ='Telugu';
        Smsdatawrapper.IsTemplateUsedForMessage = true;
        HttpRequestWrappersUtil.EmailServiceRequest EmailServiceRequestwrapper= new HttpRequestWrappersUtil.EmailServiceRequest();
        EmailServiceRequestwrapper.Subject='Test';
        EmailServiceRequestwrapper.Sender='Test';
        EmailServiceRequestwrapper.Receiver='Test';
        EmailServiceRequestwrapper.body='Test';
        EmailServiceRequestwrapper.SenderDisplayName='Test';
        EmailServiceRequestwrapper.language='Test';
        EmailServiceRequestwrapper.CustomMessageDetails=wrapper;
        HttpRequestWrappersUtil.EmailRequest EmailRequestwrapper= new HttpRequestWrappersUtil.EmailRequest();
        EmailRequestwrapper.EmailServiceRequest=EmailServiceRequestwrapper;
        HttpRequestWrappersUtil.Emaildata Emaildatawrapper= new HttpRequestWrappersUtil.Emaildata();
        Emaildatawrapper.NotificationType='Test';
        Emaildatawrapper.Language='Test';
        Emaildatawrapper.IsTemplateUsedForMessage= true;
        HttpRequestWrappersUtil.SendSMSEMailReqWrapper SendSMSEMailReqWrapperwrapper= new HttpRequestWrappersUtil.SendSMSEMailReqWrapper();
        SendSMSEMailReqWrapperwrapper.type = new List<String>();
        SendSMSEMailReqWrapperwrapper.smsdata=Smsdatawrapper;
        SendSMSEMailReqWrapperwrapper.emaildata=Emaildatawrapper;
        SendSMSEMailReqWrapperwrapper.pushdata= Pushdatawrapper;
        HttpRequestWrappersUtil.AttachmentDetails AttachmentDetailswrapper= new HttpRequestWrappersUtil.AttachmentDetails();
        HttpRequestWrappersUtil.Address Addresswrapper= new HttpRequestWrappersUtil.Address();
        Addresswrapper.links='Test';
        Addresswrapper.whatsapp_number='Test';
        HttpRequestWrappersUtil.MessageDetails MessageDetailswrapper= new HttpRequestWrappersUtil.MessageDetails();
        MessageDetailswrapper.TemplateName = 'Test Message';
        MessageDetailswrapper.DataJsonStr ='Test Message';
        MessageDetailswrapper.DataComplexity =1;
        MessageDetailswrapper.Language ='Test Message';
        MessageDetailswrapper.TIN ='Test Message';
        HttpRequestWrappersUtil.WhatsAppRequestWrapper WhatsAppRequestWrapperwrapper= new HttpRequestWrappersUtil.WhatsAppRequestWrapper();
        WhatsAppRequestWrapperwrapper.data_params = 'Test Message';
        WhatsAppRequestWrapperwrapper.channels =new List<String>();
        WhatsAppRequestWrapperwrapper.name ='Test Message';
        WhatsAppRequestWrapperwrapper.address =Addresswrapper;
        WhatsAppRequestWrapperwrapper.AttachmentDetails =AttachmentDetailswrapper;
        WhatsAppRequestWrapperwrapper.MessageDetails = MessageDetailswrapper;
        HttpRequestWrappersUtil.NPSDetractorFetchResponse NPSDetractorFetchResponsewrapper= new HttpRequestWrappersUtil.NPSDetractorFetchResponse();
        NPSDetractorFetchResponsewrapper.RequestId = 'Test Message';
        NPSDetractorFetchResponsewrapper.CheckInDate = 'Test Message';
        NPSDetractorFetchResponsewrapper.TIN = 'Test Message';
        NPSDetractorFetchResponsewrapper.MobileNumber = 'Test Message';
        NPSDetractorFetchResponsewrapper.EmailId = 'Test Message';
        NPSDetractorFetchResponsewrapper.NPS = 'Test Message';
        NPSDetractorFetchResponsewrapper.HotelName = 'Test Message';
        NPSDetractorFetchResponsewrapper.Location = 'Test Message';
        NPSDetractorFetchResponsewrapper.NoOfRooms = 'Test Message';
        NPSDetractorFetchResponsewrapper.Feedback = 'Test Message';
        NPSDetractorFetchResponsewrapper.Status = 'Test Message';
        NPSDetractorFetchResponsewrapper.Comments = 'Test Message';
        NPSDetractorFetchResponsewrapper.LockedBy = 'Test Message';
        HttpRequestWrappersUtil.PaasRefundUpsertRequest PaasRefundUpsertRequestwrapper= new HttpRequestWrappersUtil.PaasRefundUpsertRequest();
        PaasRefundUpsertRequestwrapper.isInsertTrue = true;
        PaasRefundUpsertRequestwrapper.refundMsg = 'Test Message';
        PaasRefundUpsertRequestwrapper.requestId = 'Test Message';
        PaasRefundUpsertRequestwrapper.orderId = 'Test Message';
        PaasRefundUpsertRequestwrapper.transactionId = 'Test Message';
        PaasRefundUpsertRequestwrapper.bankArnNumber = 'Test Message';
        PaasRefundUpsertRequestwrapper.amount = 'Test Message';
        PaasRefundUpsertRequestwrapper.refundedBy = 'Test Message';
        PaasRefundUpsertRequestwrapper.modifiedSource = 'Test Message';
        PaasRefundUpsertRequestwrapper.initiatedTime = 'Test Message';
        PaasRefundUpsertRequestwrapper.comments = 'Test Message';
        HttpRequestWrappersUtil.ConfirmDetails ConfirmDetailswrapper= new HttpRequestWrappersUtil.ConfirmDetails();
        ConfirmDetailswrapper.errorCode=2;
        ConfirmDetailswrapper.pnr='Test';
        ConfirmDetailswrapper.respCode='Test';
        ConfirmDetailswrapper.cancellationPolicy='Test';
        ConfirmDetailswrapper.isMTicketEnabled = true;
        ConfirmDetailswrapper.routeId=13;
        ConfirmDetailswrapper.doj='Test';
        ConfirmDetailswrapper.seatnames='Test';
        ConfirmDetailswrapper.lisErrorCode='Test';
        ConfirmDetailswrapper.contactNo='Test';
        ConfirmDetailswrapper.vendorPnr='Test';
        ConfirmDetailswrapper.rescheduleRefNo='Test';
        ConfirmDetailswrapper.seatWisePnr=new List<object>();
        HttpRequestWrappersUtil.PaymentResponse PaymentResponsewrapper= new HttpRequestWrappersUtil.PaymentResponse();
        PaymentResponsewrapper.PaymentItemId='Test';
        PaymentResponsewrapper.PgTransactionId='Test';
        PaymentResponsewrapper.PaymentStatus='Test';
        PaymentResponsewrapper.RbPgId='Test';
        PaymentResponsewrapper.IsOffline='Test';
        PaymentResponsewrapper.Amount='Test';
        PaymentResponsewrapper.PGType='Test';
        PaymentResponsewrapper.GatewayName='Test';
        HttpRequestWrappersUtil.ListConfirmOrderDTO ListConfirmOrderDTOwrapper= new HttpRequestWrappersUtil.ListConfirmOrderDTO();
        ListConfirmOrderDTOwrapper.orderItemUuid='Test';
        ListConfirmOrderDTOwrapper.confirmDetails=ConfirmDetailswrapper;
        HttpRequestWrappersUtil.ConfirmTicket ConfirmTicketwrapper= new HttpRequestWrappersUtil.ConfirmTicket();
        ConfirmTicketwrapper.confirmType='Test';
        // HttpRequestWrappersUtil.GenericHeadersWrapper generic= new HttpRequestWrappersUtil.GenericHeadersWrapper();
        // generic.key='test';
        // generic.value='test';
        HttpRequestWrappersUtil.NPSBusDectractorsResponse NPSBusDectractorsResponsewrapper= new HttpRequestWrappersUtil.NPSBusDectractorsResponse();
        NPSBusDectractorsResponsewrapper.RequestId=9;
        NPSBusDectractorsResponsewrapper.DateOfJourney='Test';
        NPSBusDectractorsResponsewrapper.TIN='Test';
        NPSBusDectractorsResponsewrapper.MobileNumber='Test';
        NPSBusDectractorsResponsewrapper.EmailId='Test';
        NPSBusDectractorsResponsewrapper.NPS='Test';
        NPSBusDectractorsResponsewrapper.Travels='Test';
        NPSBusDectractorsResponsewrapper.OperatorId='Test';
        NPSBusDectractorsResponsewrapper.Routes='Test';
        NPSBusDectractorsResponsewrapper.NoofSeats=5;
        NPSBusDectractorsResponsewrapper.Feedback='Test';
        NPSBusDectractorsResponsewrapper.Status='Test';
        NPSBusDectractorsResponsewrapper.CreateDate='Test';
        HttpRequestWrappersUtil.PaymentItem PaymentItemwrapper= new HttpRequestWrappersUtil.PaymentItem();
        PaymentItemwrapper.id='test';
        PaymentItemwrapper.additional_details='test';
        PaymentItemwrapper.created_by='test';
        PaymentItemwrapper.creation_time=DateTime.newInstance(1987, 1, 14, 23, 0, 3);
        PaymentItemwrapper.transaction_source='test';
        PaymentItemwrapper.updated_by='test';
        PaymentItemwrapper.updated_time=DateTime.newInstance(1987, 1, 14, 23, 0, 3);
        PaymentItemwrapper.version=4;
        PaymentItemwrapper.business_unit_currency='test';
        PaymentItemwrapper.business_unit_value=1.4;
        PaymentItemwrapper.amount_payable_currency='test';
        PaymentItemwrapper.amount_payable_value=1.4;
        PaymentItemwrapper.order_id='test';
        PaymentItemwrapper.payment_status='test';
        PaymentItemwrapper.payment_session_id=3;
        PaymentItemwrapper.payment_system='test';
        PaymentItemwrapper.payment_system_ref_no='test';
        PaymentItemwrapper.settled_currency='test';
        PaymentItemwrapper.settled_value=1.4;
        PaymentItemwrapper.settlement_time=DateTime.newInstance(1987, 1, 14, 23, 0, 3);
        PaymentItemwrapper.creation_time_public=4;
        PaymentItemwrapper.settlement_time_public=4;
        PaymentItemwrapper.has_discrepancy=true;
        PaymentItemwrapper.is_reconceiled=true;
        PaymentItemwrapper.commission=1.4;
        PaymentItemwrapper.payment_type=4;
        PaymentItemwrapper.is_complete=true;
        PaymentItemwrapper.guid='test';
        PaymentItemwrapper.pgName='test';
        PaymentItemwrapper.pgtype='test';
        PaymentItemwrapper.bankAccountNumber='test';
        PaymentItemwrapper.accountHolderName='test';
        PaymentItemwrapper.latestPgStatus='test';
        PaymentItemwrapper.isOffline=true;
        PaymentItemwrapper.PgRefNo='test';
        PaymentItemwrapper.operationType='test';
        HttpRequestWrappersUtil.AgentDetail AgentDetailwrapper= new HttpRequestWrappersUtil.AgentDetail();
        AgentDetailwrapper.campaign_name = 'Test Message';
        AgentDetailwrapper.agent_id ='Test Message';
        AgentDetailwrapper.agentstate ='Test Message';
        HttpRequestWrappersUtil.Response Responsewrapper= new HttpRequestWrappersUtil.Response();
        Responsewrapper.transaction_id = 'Test Message';
        Responsewrapper.response_code ='Test Message';
        Responsewrapper.status ='Test Message';
        Responsewrapper.agent_detail =AgentDetailwrapper;
        Responsewrapper.reason ='Test Message';
        HttpRequestWrappersUtil.AgentAvailableResponse AgentAvailableResponsewrapper= new HttpRequestWrappersUtil.AgentAvailableResponse();
        AgentAvailableResponsewrapper.response = Responsewrapper;
        HttpRequestWrappersUtil.RefundStatusWrapper RefundStatusWrapperwrapper= new HttpRequestWrappersUtil.RefundStatusWrapper();
        RefundStatusWrapperwrapper.status='Test';
        HttpRequestWrappersUtil.RefundStatusData RefundStatusDatawrapper= new HttpRequestWrappersUtil.RefundStatusData();
        RefundStatusDatawrapper.orderId='Test';
        RefundStatusDatawrapper.refId='Test';
        RefundStatusDatawrapper.refundStatus='Test';
        RefundStatusDatawrapper.type='Test';
        RefundStatusDatawrapper.amount='Test';
        RefundStatusDatawrapper.processedTime='Test';
        RefundStatusDatawrapper.processedBy='Test';
        RefundStatusDatawrapper.comment='Test';
        RefundStatusDatawrapper.transactionId='Test';
        HttpRequestWrappersUtil.ActivityCancelRequest ActivityCancelRequestwrapper= new HttpRequestWrappersUtil.ActivityCancelRequest();
        ActivityCancelRequestwrapper.backToSource=true;
        ActivityCancelRequestwrapper.reason='Test';
        ActivityCancelRequestwrapper.cancelledBy='Test';
        ActivityCancelRequestwrapper.emailID='Test';
        HttpRequestWrappersUtil.CancellationPolicy CancellationPolicywrapper= new HttpRequestWrappersUtil.CancellationPolicy();
        CancellationPolicywrapper.description='Test';
        CancellationPolicywrapper.chargesValue='Test';
        HttpRequestWrappersUtil.AddonsCancellationResponse AddonsCancellationResponsewrapper= new HttpRequestWrappersUtil.AddonsCancellationResponse();
        AddonsCancellationResponsewrapper.totalFare=1261992;
        AddonsCancellationResponsewrapper.refundableAmount=1261992;
        AddonsCancellationResponsewrapper.isAddOnCancellable=true;
        AddonsCancellationResponsewrapper.itemUuid='Test';
        AddonsCancellationResponsewrapper.itemType='Test';
        AddonsCancellationResponsewrapper.itemName='Test';
        AddonsCancellationResponsewrapper.errorMsg='Test';
        HttpRequestWrappersUtil.CancelTicketResponse CancelTicketResponsewrapper= new HttpRequestWrappersUtil.CancelTicketResponse();
        CancelTicketResponsewrapper.NewTicket='Test';
        CancelTicketResponsewrapper.Message='Test';
        CancelTicketResponsewrapper.Status=true;
        CancelTicketResponsewrapper.RefundAmount=1261992;
        CancelTicketResponsewrapper.CancellationCharges=1261992;
        CancelTicketResponsewrapper.IsRefundSuccess=true;
        CancelTicketResponsewrapper.NeftRefundSupported=true;
        CancelTicketResponsewrapper.OrderId='Test';
        CancelTicketResponsewrapper.SalesChannel='Test';
        CancelTicketResponsewrapper.BusinessUnit='Test';
        CancelTicketResponsewrapper.Country='Test';
        CancelTicketResponsewrapper.SelectedLanguage='Test';
        CancelTicketResponsewrapper.SeatNames='Test';
        CancelTicketResponsewrapper.CancelledSeatNames='Test';
        CancelTicketResponsewrapper.CancelledAddons=new List<string>();
        HttpRequestWrappersUtil.Context Contextwrapper= new HttpRequestWrappersUtil.Context();
        Contextwrapper.TCode='Test';
        Contextwrapper.CustomerName='Test';
        Contextwrapper.source='Test';
        Contextwrapper.destination='Test';
        Contextwrapper.JourneyDate='Test';
        Contextwrapper.NoofPax='Test';
        HttpRequestWrappersUtil.RnRrequestWrapper RnRrequestWrapperwrapper= new HttpRequestWrappersUtil.RnRrequestWrapper();
        RnRrequestWrapperwrapper.uid='Test';
        RnRrequestWrapperwrapper.channel='Test';
        RnRrequestWrapperwrapper.country='Test';
        RnRrequestWrapperwrapper.lang='Test';
        RnRrequestWrapperwrapper.query='Test';
        RnRrequestWrapperwrapper.sessionTime=7;
        RnRrequestWrapperwrapper.useCustomContext=true;
        RnRrequestWrapperwrapper.endpoint_identifier='test';
        RnRrequestWrapperwrapper.context=Contextwrapper;
        HttpRequestWrappersUtil.ResponseWrapper ResponseWrapperwrapper= new HttpRequestWrappersUtil.ResponseWrapper();
        ResponseWrapperwrapper.tin='Test';
        ResponseWrapperwrapper.responseCode='Test';
        ResponseWrapperwrapper.responseMessage='Test';
        HttpRequestWrappersUtil.RequestedBy RequestedBywrapper= new HttpRequestWrappersUtil.RequestedBy();
        RequestedBywrapper.SystemName='Test';
        RequestedBywrapper.UserName='Test';
        HttpRequestWrappersUtil.DisbursalRequestWrap DisbursalRequestWrapwrapper= new HttpRequestWrappersUtil.DisbursalRequestWrap();
        DisbursalRequestWrapwrapper.DisbursalID='Test';
        DisbursalRequestWrapwrapper.RequestedBy=RequestedBywrapper;
        HttpRequestWrappersUtil.DisbursalCaseNumberUpdate DisbursalCaseNumberUpdatewrapper= new HttpRequestWrappersUtil.DisbursalCaseNumberUpdate();
        DisbursalCaseNumberUpdatewrapper.DisbursalID='Test';
        DisbursalCaseNumberUpdatewrapper.CaseID='Test';
        HttpRequestWrappersUtil.UpdateDisbursalStatusWrap UpdateDisbursalStatusWrapwrapper= new HttpRequestWrappersUtil.UpdateDisbursalStatusWrap();
        UpdateDisbursalStatusWrapwrapper.DisbursalID='Test';
        UpdateDisbursalStatusWrapwrapper.Status='Test';
        UpdateDisbursalStatusWrapwrapper.ReferenceID='Test';
        UpdateDisbursalStatusWrapwrapper.DisbursalFailureReason='Test';
        UpdateDisbursalStatusWrapwrapper.ConfirmationResonse='Test';
        HttpRequestWrappersUtil.PassUpdatePGTxnIdWrap PassUpdatePGTxnIdWrapwrapper= new HttpRequestWrappersUtil.PassUpdatePGTxnIdWrap();
        PassUpdatePGTxnIdWrapwrapper.TransactionID=7;
        PassUpdatePGTxnIdWrapwrapper.PaymentItemUUID='Test';
        PassUpdatePGTxnIdWrapwrapper.PGTransactionID='Test';
        HttpRequestWrappersUtil.generateDisReq generateDisReqwrapper= new HttpRequestWrappersUtil.generateDisReq();
        generateDisReqwrapper.amount=7;
        generateDisReqwrapper.order_id='Test';
        generateDisReqwrapper.order_uuid='Test';
        generateDisReqwrapper.email='Test';
        generateDisReqwrapper.country_name='Test';
        generateDisReqwrapper.phone_num='Test';
        HttpRequestWrappersUtil.BpList BpListwrapper= new HttpRequestWrappersUtil.BpList();
        BpListwrapper.locationId=7;
        BpListwrapper.locationName='Test';
        BpListwrapper.BpAddress='Test';
        HttpRequestWrappersUtil.p42 p42wrapper= new HttpRequestWrappersUtil.p42();
        p42wrapper.Eta=7;
        p42wrapper.EstTimeToReachDest=0;
        p42wrapper.BpDp='Test';
        p42wrapper.FlexiTicket=false;
        HttpRequestWrappersUtil.inv invwrapper= new HttpRequestWrappersUtil.inv();
        invwrapper.bt='trest';
        invwrapper.sn='Test';
        invwrapper.tvs='Test';
        invwrapper.p42=p42wrapper;
        HttpRequestWrappersUtil.NotificationResponse NotificationResponsewrapper= new HttpRequestWrappersUtil.NotificationResponse();
        NotificationResponsewrapper.statusMessage='Test';
        NotificationResponsewrapper.isEmailSent=false;
        NotificationResponsewrapper.isSMSSent=false;
        NotificationResponsewrapper.isWhatsAppSent=false;
        NotificationResponsewrapper.emailRespId='Test';
        NotificationResponsewrapper.SMSRespId='Test';
        NotificationResponsewrapper.WhatsRespId='Test';
        NotificationResponsewrapper.Data='Test';
        HttpRequestWrappersUtil.TicketFare TicketFarewrapper= new HttpRequestWrappersUtil.TicketFare();
        TicketFarewrapper.amount=7.9;
        TicketFarewrapper.currencyType='Test';
        HttpRequestWrappersUtil.customerPriceBreakUp customerPriceBreakUpwrapper= new HttpRequestWrappersUtil.customerPriceBreakUp();
        customerPriceBreakUpwrapper.value=7.9;
        customerPriceBreakUpwrapper.componentName='Test';
        HttpRequestWrappersUtil.priceBreakupResponse priceBreakupResponsewrapper= new HttpRequestWrappersUtil.priceBreakupResponse();
        priceBreakupResponsewrapper.Discount=7.9;
        priceBreakupResponsewrapper.errorMsg='Test';
        priceBreakupResponsewrapper.TicketFare=TicketFarewrapper;
        HttpRequestWrappersUtil.data datawrapper= new HttpRequestWrappersUtil.data();
        datawrapper.conductorName='Test';
        datawrapper.assignStatus='Test';
        datawrapper.trackingType='Test';
        datawrapper.conductorNumber='Test';
        datawrapper.source='Test';
        datawrapper.driverName='Test';
        datawrapper.destination='Test';
        datawrapper.driverNumber='Test';
        datawrapper.serviceNo='Test';
        datawrapper.vehicleNumber='Test';
        datawrapper.passengerCount=9;
        datawrapper.operatorServiceNum='Test';
        HttpRequestWrappersUtil.busAssignmentResponse busAssignmentResponsewrapper= new HttpRequestWrappersUtil.busAssignmentResponse();
        busAssignmentResponsewrapper.showError='trest';
        busAssignmentResponsewrapper.operator='Test';
        HttpRequestWrappersUtil.ErrorCls ErrorClswrapper= new HttpRequestWrappersUtil.ErrorCls();
        ErrorClswrapper.pnr='trest';
        ErrorClswrapper.error='Test';
        HttpRequestWrappersUtil.DataCls DataClswrapper= new HttpRequestWrappersUtil.DataCls();
        DataClswrapper.refundAmount=1.4;
        DataClswrapper.pnr='Test';
        HttpRequestWrappersUtil.RedRailsReconResponse RedRailsReconResponsewrapper= new HttpRequestWrappersUtil.RedRailsReconResponse();
        RedRailsReconResponsewrapper.status='trest';
        HttpRequestWrappersUtil.CancellationDetail CancellationDetailwrapper= new HttpRequestWrappersUtil.CancellationDetail();
        CancellationDetailwrapper.refundAmount=1.4;
        CancellationDetailwrapper.pnr='Test';
        HttpRequestWrappersUtil.RedRailsReconRequest RedRailsReconRequestwrapper= new HttpRequestWrappersUtil.RedRailsReconRequest();
        RedRailsReconRequestwrapper.isMultiSeatCancel=true;

    }
    
}